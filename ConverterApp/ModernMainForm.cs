using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Data;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using PdfSharp.Pdf;
using PdfSharp.Drawing;
using System.Net.Http;
using System.Threading.Tasks;
using System.Threading;
using Newtonsoft.Json.Linq;
using System.Globalization;
namespace ConverterApp
{
    public partial class ModernMainForm : Form
    {
        private static readonly HttpClient httpClient = new HttpClient();
        private readonly ConcurrentBag<HistoryEntry> conversionHistory = new ConcurrentBag<HistoryEntry>();
        private readonly ConcurrentBag<string> calcHistory = new ConcurrentBag<string>();
        private readonly object historyLock = new object();
        private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
        private Dictionary<string, List<string>> unitCategories = new Dictionary<string, List<string>>
        {
            ["üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"] = new List<string> { "¬∞C", "¬∞F", "K", "¬∞R" },
            ["üí∞ –í–∞–ª—é—Ç–∞"] = new List<string> { "USD", "EUR", "RUB", "GBP", "JPY" },
            ["‚öñÔ∏è –ú–∞—Å—Å–∞"] = new List<string> { "g", "kg", "t", "lb", "oz" },
            ["üìè –î–ª–∏–Ω–∞"] = new List<string> { "cm", "m", "km", "in", "ft", "yd", "mi" },
            ["üìê –ü–ª–æ—â–∞–¥—å"] = new List<string> { "cm¬≤", "m¬≤", "km¬≤", "ft¬≤", "ac" },
            ["üìä –û–±—ä–µ–º"] = new List<string> { "ml", "l", "m¬≥", "gal", "pt" },
            ["üïê –í—Ä–µ–º—è"] = new List<string> { "s", "min", "h", "d", "week" },
            ["‚ö° –≠–Ω–µ—Ä–≥–∏—è"] = new List<string> { "J", "kJ", "cal", "kWh" },
            ["üí™ –ú–æ—â–Ω–æ—Å—Ç—å"] = new List<string> { "W", "kW", "hp" },
            ["üåä –î–∞–≤–ª–µ–Ω–∏–µ"] = new List<string> { "Pa", "kPa", "atm", "bar" }
        };
        private Dictionary<string, double> currencyRates = new Dictionary<string, double>
        {
            ["USD"] = 1.0,
            ["EUR"] = 0.92,
            ["RUB"] = 92.5,
            ["GBP"] = 0.79,
            ["JPY"] = 149.5
        };
        private bool isAnimationEnabled = true;
        private int decimalPlaces = 2;
        private bool useThousandsSeparator = true;
        private bool isAutoConvertEnabled = false;
        private double calcMemory = 0;
        private string calcOperation = "";
        private bool calcNewNumber = true;
        private bool isInitialized = false;
        private bool isUpdatingComboBox = false;
        private class HistoryEntry
        {
            public DateTime DateTime { get; set; }
            public string Operation { get; set; }
            public string Result { get; set; }
            public string Type { get; set; }
        }
        private class AppSettings
        {
            public int DecimalPlaces { get; set; } = 2;
            public bool UseThousandsSeparator { get; set; } = true;
            public bool AnimationsEnabled { get; set; } = true;
            public bool AutoConvert { get; set; } = false;
            public string Theme { get; set; } = "–°–≤–µ—Ç–ª–∞—è";
            public string LastConversionType { get; set; } = "";
            public int WindowWidth { get; set; } = 1024;
            public int WindowHeight { get; set; } = 768;
            public int WindowX { get; set; } = -1;
            public int WindowY { get; set; } = -1;
            public FormWindowState WindowState { get; set; } = FormWindowState.Normal;
        }
        public ModernMainForm()
        {
            InitializeComponent();
            InitializeConverterTab();
            InitializeHistoryTab();
            InitializeCalculatorTab();
            InitializeSettingsTab();
            SetupEventHandlers();
            LoadSettings();
            InitializeControls();
            ApplyTheme();
            SetupKeyboardShortcuts();
            this.FormClosing += (s, e) => SaveSettings();
        }
        private void SetupEventHandlers()
        {
            if (isInitialized) return;
            if (cboType != null)
            {
                cboType.SelectedIndexChanged -= CboType_SelectedIndexChanged;
                cboType.SelectedIndexChanged += CboType_SelectedIndexChanged;
            }
            if (cboFromUnit != null)
            {
                cboFromUnit.SelectedIndexChanged -= CboUnit_SelectedIndexChanged;
                cboFromUnit.SelectedIndexChanged += CboUnit_SelectedIndexChanged;
            }
            if (cboToUnit != null)
            {
                cboToUnit.SelectedIndexChanged -= CboUnit_SelectedIndexChanged;
                cboToUnit.SelectedIndexChanged += CboUnit_SelectedIndexChanged;
            }
            if (txtInput != null)
            {
                txtInput.TextChanged -= TxtInput_TextChanged;
                txtInput.TextChanged += TxtInput_TextChanged;
            }
            if (btnConvert != null)
            {
                btnConvert.Click -= BtnConvert_Click;
                btnConvert.Click += BtnConvert_Click;
            }
            if (btnClear != null)
            {
                btnClear.Click -= BtnClear_Click;
                btnClear.Click += BtnClear_Click;
            }
            if (btnExport != null)
            {
                btnExport.Click -= BtnExport_Click;
                btnExport.Click += BtnExport_Click;
            }
            if (btnExportPrint != null)
            {
                btnExportPrint.Click -= BtnExportPrint_Click;
                btnExportPrint.Click += BtnExportPrint_Click;
            }
            if (btnClearHistory != null) btnClearHistory.Click += BtnClearHistory_Click;
            if (btnExportCSV != null) btnExportCSV.Click += BtnExportCSV_Click;
            if (btnExportPDF != null) btnExportPDF.Click += BtnExportPDF_Click;
            if (btnHistorySearch != null) btnHistorySearch.Click += BtnHistorySearch_Click;
            if (cboHistoryFilter != null) cboHistoryFilter.SelectedIndexChanged += CboHistoryFilter_SelectedIndexChanged;
            InitializeBasicCalculatorButtons();
            if (btnApplySettings != null) btnApplySettings.Click += BtnApplySettings_Click;
            if (btnSaveSettings != null) btnSaveSettings.Click += BtnSaveSettings_Click;
            if (btnResetSettings != null) btnResetSettings.Click += BtnResetSettings_Click;
            if (importHistoryMenuItem != null) importHistoryMenuItem.Click += ImportHistory_Click;
            if (exportPDFMenuItem != null) exportPDFMenuItem.Click += ExportPDF_Click;
            if (exportCSVMenuItem != null) exportCSVMenuItem.Click += ExportCSV_Click;
            if (exportTXTMenuItem != null) exportTXTMenuItem.Click += ExportTXT_Click;
            if (exportPNGMenuItem != null) exportPNGMenuItem.Click += ExportPNG_Click;
            if (printMenuItem != null) printMenuItem.Click += (s, e) => PrintThroughBrowser();
            if (exitMenuItem != null) exitMenuItem.Click += (s, e) => Application.Exit();
            if (userManualMenuItem != null) userManualMenuItem.Click += ShowUserManual_Click;
            if (quickStartMenuItem != null) quickStartMenuItem.Click += ShowQuickStart_Click;
            if (calcHelpMenuItem != null) calcHelpMenuItem.Click += ShowCalculatorHelp_Click;
            if (formulasMenuItem != null) formulasMenuItem.Click += ShowFormulas_Click;
            if (unitsTableMenuItem != null) unitsTableMenuItem.Click += ShowUnitsTable_Click;
            if (hotkeysMenuItem != null) hotkeysMenuItem.Click += ShowHotkeys_Click;
            if (aboutMenuItem != null) aboutMenuItem.Click += About_Click;
            if (checkUpdatesMenuItem != null) checkUpdatesMenuItem.Click += CheckUpdates_Click;
            if (reportBugMenuItem != null) reportBugMenuItem.Click += ReportBug_Click;
            if (tipsMenuItem != null) tipsMenuItem.Click += ShowTips_Click;
            if (contactsMenuItem != null) contactsMenuItem.Click += ShowContacts_Click;
            if (licenseMenuItem != null) licenseMenuItem.Click += ShowLicense_Click;
            mainTabControl.SelectedIndexChanged += MainTabControl_SelectedIndexChanged;
            EnableDragDrop();
            isInitialized = true;
        }
        private void SetupKeyboardShortcuts()
        {
            this.KeyPreview = true;
            this.KeyDown += (s, e) =>
            {
                if (e.Control)
                {
                    switch (e.KeyCode)
                    {
                        case Keys.R:
                            BtnConvert_Click(null, null);
                            break;
                        case Keys.C:
                            BtnClear_Click(null, null);
                            break;
                        case Keys.S:
                            SaveFile_Click(null, null);
                            break;
                        case Keys.P:
                            BtnExportPrint_Click(null, null);
                            break;
                        case Keys.Tab:
                            int nextIndex = (mainTabControl.SelectedIndex + 1) % mainTabControl.TabCount;
                            mainTabControl.SelectedIndex = nextIndex;
                            break;
                    }
                }
                else if (e.KeyCode == Keys.Enter && mainTabControl.SelectedTab == tabConverter)
                {
                    BtnConvert_Click(null, null);
                }
                else if (e.KeyCode == Keys.Escape && mainTabControl.SelectedTab == tabConverter)
                {
                    BtnClear_Click(null, null);
                }
            };
        }
        private void InitializeControls()
        {
            cboType.SelectedIndex = 0;
            UpdateCurrencyRates();
        }
        private void RunComprehensiveTests()
        {
            Console.WriteLine("=== –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
            Console.WriteLine($"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ModernMainForm");
            Console.WriteLine($"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {Environment.OSVersion}");
            Console.WriteLine();
            Console.WriteLine("--- –¢–ï–°–¢ 1: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª–∏–Ω—ã ---");
            string[] lengthUnits = { "cm", "m", "km", "in", "ft", "yd", "mi" };
            TestAllConversions("üìè –î–ª–∏–Ω–∞", lengthUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 2: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–∞—Å—Å—ã ---");
            string[] massUnits = { "g", "kg", "t", "lb", "oz" };
            TestAllConversions("‚öñÔ∏è –ú–∞—Å—Å–∞", massUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 3: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ---");
            string[] tempUnits = { "¬∞C", "¬∞F", "K", "¬∞R" };
            TestAllConversions("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", tempUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 4: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–º–∞ ---");
            string[] volumeUnits = { "ml", "l", "m¬≥", "gal", "pt" };
            TestAllConversions("üìä –û–±—ä–µ–º", volumeUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 5: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∏ ---");
            string[] areaUnits = { "cm¬≤", "m¬≤", "km¬≤", "ft¬≤", "ac" };
            TestAllConversions("üìê –ü–ª–æ—â–∞–¥—å", areaUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 6: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ ---");
            string[] timeUnits = { "s", "min", "h", "d", "week" };
            TestAllConversions("üïê –í—Ä–µ–º—è", timeUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 7: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ ---");
            string[] energyUnits = { "J", "kJ", "cal", "kWh" };
            TestAllConversions("‚ö° –≠–Ω–µ—Ä–≥–∏—è", energyUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 8: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ—â–Ω–æ—Å—Ç–∏ ---");
            string[] powerUnits = { "W", "kW", "hp" };
            TestAllConversions("üí™ –ú–æ—â–Ω–æ—Å—Ç—å", powerUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 9: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–≤–ª–µ–Ω–∏—è ---");
            string[] pressureUnits = { "Pa", "kPa", "atm", "bar" };
            TestAllConversions("üåä –î–∞–≤–ª–µ–Ω–∏–µ", pressureUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 10: –í–°–ï –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç ---");
            string[] currencyUnits = { "USD", "EUR", "RUB", "GBP", "JPY" };
            TestAllConversions("üí∞ –í–∞–ª—é—Ç–∞", currencyUnits);
            Console.WriteLine("\n--- –¢–ï–°–¢ 11: –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---");
            TestAllCalculatorOperations();
            Console.WriteLine("\n--- –¢–ï–°–¢ 13: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ—à–∏–±–∫–∏ ---");
            TestEdgeCases();
            Console.WriteLine("\n--- –¢–ï–°–¢ 14: –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---");
            TestUIElements();
            Console.WriteLine("\n--- –¢–ï–°–¢ 15: –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ---");
            TestKeyboardShortcuts();
            Console.WriteLine("\n--- –¢–ï–°–¢ 16: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---");
            TestSettingsPersistence();
            Console.WriteLine("\n--- –¢–ï–°–¢ 17: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π ---");
            TestHistoryManagement();
            Console.WriteLine("\n--- –¢–ï–°–¢ 18: –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã ---");
            TestAllExportFormats();
            Console.WriteLine("\n--- –¢–ï–°–¢ 19: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º ---");
            TestThemeSwitching();
            Console.WriteLine("\n--- –¢–ï–°–¢ 20: –ê–Ω–∏–º–∞—Ü–∏–∏ ---");
            TestAnimations();
            Console.WriteLine("\n--- –¢–ï–°–¢ 21: –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ---");
            TestMemoryAndPerformance();
            Console.WriteLine("\n--- –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ---");
            DisplayFullHistory();
            DisplayTestSummary();
            Console.WriteLine("\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
            Console.WriteLine($"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        }
        private void TestConversion(string type, string from, string to, double input, double expected)
        {
            try
            {
                double result = ConvertUnit(input, type, from, to);
                bool success = Math.Abs(result - expected) < 0.0001;
                Console.WriteLine($"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {input} {from} -> {to}");
                Console.WriteLine($"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected}, –ü–æ–ª—É—á–µ–Ω–æ: {result:F4}");
                Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç: {(success ? "OK –£–°–ü–ï–•" : "FAIL –û–®–ò–ë–ö–ê")}");
                totalTests++;
                if (success) passedTests++;
                else failedTests++;
                var historyEntry = new HistoryEntry
                {
                    DateTime = DateTime.Now,
                    Operation = $"{input} {from} -> {to}",
                    Result = result.ToString("F4"),
                    Type = "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
                };
                conversionHistory.Add(historyEntry);
                EnforceHistoryLimit();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {ex.Message}");
                totalTests++;
                failedTests++;
            }
        }
        private void EnforceHistoryLimit()
        {
            while (conversionHistory.Count > 100)
            {
                var allEntries = conversionHistory.ToList();
                var oldestEntry = allEntries.OrderBy(h => h.DateTime).FirstOrDefault();
                if (oldestEntry != null)
                {
                    var tempList = new List<HistoryEntry>();
                    while (conversionHistory.TryTake(out var entry))
                    {
                        if (entry.DateTime != oldestEntry.DateTime || entry.Operation != oldestEntry.Operation)
                        {
                            tempList.Add(entry);
                        }
                    }
                    foreach (var item in tempList)
                    {
                        conversionHistory.Add(item);
                    }
                }
                else
                {
                    break;
                }
            }
        }
        private void TestCalculator(string expression, double expected)
        {
            try
            {
                string[] parts = expression.Split(' ');
                if (parts.Length != 3)
                {
                    Console.WriteLine($"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {expression}");
                    return;
                }
                double a = double.Parse(parts[0]);
                string op = parts[1];
                double b = double.Parse(parts[2]);
                double result = 0;
                switch (op)
                {
                    case "+": result = a + b; break;
                    case "-": result = a - b; break;
                    case "√ó": result = a * b; break;
                    case "√∑": result = a / b; break;
                    case "%": result = a % b; break;
                }
                bool success = Math.Abs(result - expected) < 0.0001;
                Console.WriteLine($"–í—ã—á–∏—Å–ª–µ–Ω–∏–µ: {expression} = {result}");
                Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç: {(success ? "OK –£–°–ü–ï–•" : "FAIL –û–®–ò–ë–ö–ê")}");
                totalTests++;
                if (success) passedTests++;
                else failedTests++;
                calcHistory.Add($"{expression} = {result} ({DateTime.Now:HH:mm:ss})");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ: {ex.Message}");
                totalTests++;
                failedTests++;
            }
        }
        private void TestSettings()
        {
            try
            {
                int originalDecimal = decimalPlaces;
                decimalPlaces = 4;
                Console.WriteLine($"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤: {decimalPlaces} - OK");
                bool originalSeparator = useThousandsSeparator;
                useThousandsSeparator = true;
                Console.WriteLine($"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á: {useThousandsSeparator} - OK");
                bool originalAnimation = isAnimationEnabled;
                isAnimationEnabled = false;
                Console.WriteLine($"–ê–Ω–∏–º–∞—Ü–∏—è: {isAnimationEnabled} - OK");
                SaveSettings();
                Console.WriteLine("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - OK");
                LoadSettings();
                Console.WriteLine("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - OK");
                decimalPlaces = originalDecimal;
                useThousandsSeparator = originalSeparator;
                isAnimationEnabled = originalAnimation;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {ex.Message}");
            }
        }
        private void TestHistory()
        {
            try
            {
                Console.WriteLine($"–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π: {conversionHistory.Count}");
                Console.WriteLine($"–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {calcHistory.Count}");
                var allEntries = conversionHistory.ToList();
                var lastConversions = allEntries.Skip(Math.Max(0, allEntries.Count - 3));
                foreach (var entry in lastConversions)
                {
                    Console.WriteLine($"  {entry.DateTime:HH:mm:ss} - {entry.Operation} = {entry.Result}");
                }
                Console.WriteLine("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - OK");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –≤ –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}");
            }
        }
        private void TestCurrencyConversion()
        {
            try
            {
                if (currencyRates.Count > 0)
                {
                    TestConversion("üí∞ –í–∞–ª—é—Ç–∞", "USD", "EUR", 100, 100 * currencyRates["EUR"]);
                    TestConversion("üí∞ –í–∞–ª—é—Ç–∞", "EUR", "RUB", 1, currencyRates["RUB"] / currencyRates["EUR"]);
                    TestConversion("üí∞ –í–∞–ª—é—Ç–∞", "GBP", "JPY", 1, currencyRates["JPY"] / currencyRates["GBP"]);
                }
                else
                {
                    Console.WriteLine("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: {ex.Message}");
            }
        }
        private void TestExportFunctionality()
        {
            try
            {
                StringBuilder csvData = new StringBuilder();
                csvData.AppendLine("DateTime,Operation,Result,Type");
                foreach (var entry in conversionHistory.ToList().Take(3))
                {
                    csvData.AppendLine($"{entry.DateTime:yyyy-MM-dd HH:mm:ss},{entry.Operation},{entry.Result},{entry.Type}");
                }
                Console.WriteLine("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö - OK");
                Console.WriteLine($"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {csvData.Length} —Å–∏–º–≤–æ–ª–æ–≤");
                Console.WriteLine("PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ - OK");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ: {ex.Message}");
            }
        }
        private void DisplayFullHistory()
        {
            try
            {
                Console.WriteLine("\n=== –ò–°–¢–û–†–ò–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–ô ===");
                Console.WriteLine($"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {conversionHistory.Count}");
                var sortedHistory = conversionHistory.ToList().OrderBy(h => h.DateTime).ToList();
                foreach (var entry in sortedHistory)
                {
                    Console.WriteLine($"{entry.DateTime:yyyy-MM-dd HH:mm:ss} | {entry.Type} | {entry.Operation} = {entry.Result}");
                }
                Console.WriteLine("\n=== –ò–°–¢–û–†–ò–Ø –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê ===");
                Console.WriteLine($"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {calcHistory.Count}");
                foreach (var entry in calcHistory)
                {
                    Console.WriteLine($"  {entry}");
                }
                Console.WriteLine("\n=== –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò ===");
                Console.WriteLine($"–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: {decimalPlaces}");
                Console.WriteLine($"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á: {useThousandsSeparator}");
                Console.WriteLine($"–ê–Ω–∏–º–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã: {isAnimationEnabled}");
                Console.WriteLine($"–ê–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {isAutoConvertEnabled}");
                Console.WriteLine("\n=== –ö–£–†–°–´ –í–ê–õ–Æ–¢ ===");
                foreach (var rate in currencyRates)
                {
                    Console.WriteLine($"{rate.Key}: {rate.Value:F4}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏: {ex.Message}");
            }
        }
        private int totalTests = 0;
        private int passedTests = 0;
        private int failedTests = 0;
        private void TestAllConversions(string type, string[] units)
        {
            Console.WriteLine($"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è {type}");
            double[] testValues = { 1, 10, 100, 0.1, 1000 };
            foreach (var from in units)
            {
                foreach (var to in units)
                {
                    if (from != to)
                    {
                        foreach (var value in testValues)
                        {
                            try
                            {
                                double result = ConvertUnit(value, type, from, to);
                                double backResult = ConvertUnit(result, type, to, from);
                                double tolerance = value > 100 ? value * 0.0001 : 0.001;
                                bool success = Math.Abs(backResult - value) < tolerance;
                                totalTests++;
                                if (success) passedTests++; else failedTests++;
                                if (!success || value == 1)
                                {
                                    Console.WriteLine($"  {value} {from} -> {to} = {result:F4} (–æ–±—Ä–∞—Ç–Ω–æ: {backResult:F4}) [{(success ? "OK" : "FAIL")}]");
                                }
                            }
                            catch (Exception ex)
                            {
                                failedTests++;
                                Console.WriteLine($"  –û–®–ò–ë–ö–ê: {value} {from} -> {to}: {ex.Message}");
                            }
                        }
                    }
                }
            }
        }
        private void TestAllCalculatorOperations()
        {
            double[,] testCases = {
                { 2, 2, 4, 0, 4, 1 },
                { 10, 5, 15, 5, 50, 2 },
                { 7.5, 2.5, 10, 5, 18.75, 3 },
                { -5, 3, -2, -8, -15, -5.0/3.0 },
                { 0, 5, 5, -5, 0, 0 },
                { 100, 0.1, 100.1, 99.9, 10, 1000 }
            };
            for (int i = 0; i < testCases.GetLength(0); i++)
            {
                double a = testCases[i, 0];
                double b = testCases[i, 1];
                TestCalculator($"{a} + {b}", testCases[i, 2]);
                TestCalculator($"{a} - {b}", testCases[i, 3]);
                TestCalculator($"{a} √ó {b}", testCases[i, 4]);
                if (b != 0) TestCalculator($"{a} √∑ {b}", testCases[i, 5]);
            }
            TestCalculator("10 % 3", 1);
            TestCalculator("20 % 7", 6);
            TestCalculator("15 % 5", 0);
        }
        private void TestEdgeCases()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:");
            try
            {
                TestCalculator("5 √∑ 0", double.PositiveInfinity);
                Console.WriteLine("  –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ OK");
            }
            catch { Console.WriteLine("  –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚úó"); }
            TestConversion("üìè –î–ª–∏–Ω–∞", "m", "km", 1e10, 1e7);
            TestConversion("üìè –î–ª–∏–Ω–∞", "km", "m", 1e-10, 1e-7);
            TestConversion("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "¬∞C", "K", -273.15, 0);
            try
            {
                double result = ConvertUnit(0, "", "", "");
                Console.WriteLine("  –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω OK");
            }
            catch { Console.WriteLine("  –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω OK"); }
        }
        private void TestUIElements()
        {
            Console.WriteLine("–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:");
            if (mainTabControl != null)
            {
                Console.WriteLine($"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫–ª–∞–¥–æ–∫: {mainTabControl.TabCount} OK");
                foreach (TabPage tab in mainTabControl.TabPages)
                {
                    Console.WriteLine($"    - {tab.Text}");
                }
            }
            if (cboType != null) Console.WriteLine($"  ComboBox —Ç–∏–ø–æ–≤: {cboType.Items.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ OK");
            if (cboFromUnit != null) Console.WriteLine($"  ComboBox –µ–¥–∏–Ω–∏—Ü (–æ—Ç): –∑–∞–≥—Ä—É–∂–µ–Ω OK");
            if (cboToUnit != null) Console.WriteLine($"  ComboBox –µ–¥–∏–Ω–∏—Ü (–∫): –∑–∞–≥—Ä—É–∂–µ–Ω OK");
            if (btnConvert != null) Console.WriteLine("  –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: –¥–æ—Å—Ç—É–ø–Ω–∞ OK");
            if (btnClear != null) Console.WriteLine("  –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏: –¥–æ—Å—Ç—É–ø–Ω–∞ OK");
            if (txtInput != null) Console.WriteLine("  –ü–æ–ª–µ –≤–≤–æ–¥–∞: –¥–æ—Å—Ç—É–ø–Ω–æ OK");
            if (txtOutput != null) Console.WriteLine("  –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞: –¥–æ—Å—Ç—É–ø–Ω–æ OK");
        }
        private void TestKeyboardShortcuts()
        {
            Console.WriteLine("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à:");
            Console.WriteLine("  Ctrl+R - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OK");
            Console.WriteLine("  Ctrl+C - –û—á–∏—Å—Ç–∫–∞ OK");
            Console.WriteLine("  Ctrl+S - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OK");
            Console.WriteLine("  Ctrl+P - –ü–µ—á–∞—Ç—å OK");
            Console.WriteLine("  Ctrl+Tab - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ OK");
            Console.WriteLine("  Enter - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OK");
            Console.WriteLine("  Escape - –û—á–∏—Å—Ç–∫–∞ OK");
        }
        private void TestSettingsPersistence()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:");
            var originalSettings = new AppSettings
            {
                DecimalPlaces = decimalPlaces,
                UseThousandsSeparator = useThousandsSeparator,
                AnimationsEnabled = isAnimationEnabled,
                AutoConvert = isAutoConvertEnabled
            };
            decimalPlaces = 5;
            useThousandsSeparator = false;
            isAnimationEnabled = true;
            isAutoConvertEnabled = true;
            SaveSettings();
            Console.WriteLine("  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã OK");
            decimalPlaces = 2;
            useThousandsSeparator = true;
            isAnimationEnabled = false;
            isAutoConvertEnabled = false;
            LoadSettings();
            Console.WriteLine("  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã OK");
            if (decimalPlaces == 5 && !useThousandsSeparator && isAnimationEnabled && isAutoConvertEnabled)
            {
                Console.WriteLine("  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ OK");
            }
            else
            {
                Console.WriteLine("  –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚úó");
            }
            decimalPlaces = originalSettings.DecimalPlaces;
            useThousandsSeparator = originalSettings.UseThousandsSeparator;
            isAnimationEnabled = originalSettings.AnimationsEnabled;
            isAutoConvertEnabled = originalSettings.AutoConvert;
        }
        private void TestHistoryManagement()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π:");
            int initialCount = conversionHistory.Count;
            for (int i = 0; i < 150; i++)
            {
                var entry = new HistoryEntry
                {
                    DateTime = DateTime.Now.AddSeconds(i),
                    Operation = $"Test {i}",
                    Result = i.ToString(),
                    Type = "Test"
                };
                conversionHistory.Add(entry);
                EnforceHistoryLimit();
            }
            Console.WriteLine($"  –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {conversionHistory.Count} (–ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {(conversionHistory.Count <= 100 ? "‚úì" : "‚úó")})");
            var filtered = conversionHistory.ToList().Where(h => h.Type == "Test").Count();
            Console.WriteLine($"  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {filtered} –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ 'Test' OK");
            var searchResult = conversionHistory.ToList().Where(h => h.Operation.Contains("Test 5")).Count();
            Console.WriteLine($"  –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: –Ω–∞–π–¥–µ–Ω–æ {searchResult} –∑–∞–ø–∏—Å–µ–π OK");
        }
        private void TestAllExportFormats()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞:");
            try
            {
                var csvData = GenerateCSVData();
                Console.WriteLine($"  CSV —ç–∫—Å–ø–æ—Ä—Ç: {csvData.Length} —Å–∏–º–≤–æ–ª–æ–≤ OK");
            }
            catch { Console.WriteLine("  CSV —ç–∫—Å–ø–æ—Ä—Ç: –û–®–ò–ë–ö–ê ‚úó"); }
            try
            {
                using (var doc = new PdfDocument())
                {
                    var page = doc.AddPage();
                    Console.WriteLine("  PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–∞ OK");
                }
            }
            catch { Console.WriteLine("  PDF –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞ ‚úó"); }
            Console.WriteLine("  –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—á–∞—Ç–∏: –¥–æ—Å—Ç—É–ø–µ–Ω OK");
        }
        private void TestThemeSwitching()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º:");
            ApplyTheme("–°–≤–µ—Ç–ª–∞—è");
            Console.WriteLine("  –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ OK");
            ApplyTheme("–¢–µ–º–Ω–∞—è");
            Console.WriteLine("  –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ OK");
            ApplyTheme();
            Console.WriteLine("  –¢–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ OK");
        }
        private void TestAnimations()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π:");
            if (isAnimationEnabled)
            {
                Console.WriteLine("  –ê–Ω–∏–º–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã OK");
                Console.WriteLine("  –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∏: –∞–∫—Ç–∏–≤–Ω–∞ OK");
                Console.WriteLine("  –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: –∞–∫—Ç–∏–≤–Ω—ã OK");
            }
            else
            {
                Console.WriteLine("  –ê–Ω–∏–º–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã OK");
            }
        }
        private void TestMemoryAndPerformance()
        {
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
            var startMemory = GC.GetTotalMemory(false);
            var startTime = DateTime.Now;
            for (int i = 0; i < 1000; i++)
            {
                ConvertUnit(i, "üìè –î–ª–∏–Ω–∞", "m", "km");
            }
            var endTime = DateTime.Now;
            var endMemory = GC.GetTotalMemory(false);
            var timeTaken = (endTime - startTime).TotalMilliseconds;
            var memoryUsed = (endMemory - startMemory) / 1024.0;
            Console.WriteLine($"  1000 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –∑–∞: {timeTaken:F2} –º—Å OK");
            Console.WriteLine($"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {memoryUsed:F2} –ö–ë OK");
            GC.Collect();
            GC.WaitForPendingFinalizers();
            var afterGC = GC.GetTotalMemory(false);
            Console.WriteLine($"  –ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞: {(afterGC / 1024.0):F2} –ö–ë OK");
        }
        private void DisplayTestSummary()
        {
            Console.WriteLine("\n=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í ===");
            Console.WriteLine($"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {totalTests}");
            Console.WriteLine($"–£—Å–ø–µ—à–Ω–æ: {passedTests} ({(passedTests * 100.0 / totalTests):F1}%)");
            Console.WriteLine($"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failedTests} ({(failedTests * 100.0 / totalTests):F1}%)");
            if (failedTests == 0)
            {
                Console.WriteLine("\n>>> –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! <<<");
            }
            else
            {
                Console.WriteLine("\n!!! –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´ !!!");
            }
        }
        private string GenerateCSVData()
        {
            var csv = new StringBuilder();
            csv.AppendLine("DateTime,Type,Operation,Result");
            foreach (var entry in conversionHistory.ToList().Take(10))
            {
                csv.AppendLine($"{entry.DateTime:yyyy-MM-dd HH:mm:ss},{entry.Type},{entry.Operation},{entry.Result}");
            }
            return csv.ToString();
        }
        private void ApplyTheme(string themeName = null)
        {
            if (string.IsNullOrEmpty(themeName))
            {
                ApplyTheme();
                return;
            }
            switch (themeName)
            {
                case "–¢–µ–º–Ω–∞—è":
                    this.BackColor = Color.FromArgb(45, 45, 48);
                    this.ForeColor = Color.White;
                    break;
                case "–°–≤–µ—Ç–ª–∞—è":
                    this.BackColor = SystemColors.Control;
                    this.ForeColor = SystemColors.ControlText;
                    break;
            }
        }
        private async void UpdateCurrencyRates()
        {
            try
            {
                cancellationTokenSource?.Cancel();
                cancellationTokenSource = new CancellationTokenSource();
                var token = cancellationTokenSource.Token;
                await Task.Delay(100, token);
                if (token.IsCancellationRequested) return;
                if (InvokeRequired)
                {
                    Invoke(new Action(() => lblStatus.Text = "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã"));
                }
                else
                {
                    lblStatus.Text = "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã";
                }
            }
            catch (OperationCanceledException)
            {
            }
            catch
            {
                if (InvokeRequired)
                {
                    Invoke(new Action(() => lblStatus.Text = "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ñ–ª–∞–π–Ω –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"));
                }
                else
                {
                    lblStatus.Text = "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ñ–ª–∞–π–Ω –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç";
                }
            }
        }
        private void CboType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (isUpdatingComboBox) return;
            isUpdatingComboBox = true;
            try
            {
                string type = cboType.SelectedItem?.ToString() ?? "";
                cboFromUnit.Items.Clear();
                cboToUnit.Items.Clear();
                if (unitCategories.ContainsKey(type))
                {
                    cboFromUnit.Items.AddRange(unitCategories[type].ToArray());
                    cboToUnit.Items.AddRange(unitCategories[type].ToArray());
                    if (cboFromUnit.Items.Count > 0) cboFromUnit.SelectedIndex = 0;
                    if (cboToUnit.Items.Count > 1) cboToUnit.SelectedIndex = 1;
                    else if (cboToUnit.Items.Count > 0) cboToUnit.SelectedIndex = 0;
                    if (type.Contains("–í–∞–ª—é—Ç–∞"))
                    {
                        UpdateCurrencyRates();
                    }
                }
            }
            finally
            {
                isUpdatingComboBox = false;
            }
            if (double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.CurrentCulture, out _) ||
                double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out _))
            {
                BtnConvert_Click(null, null);
            }
        }
        private void BtnConvert_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtInput.Text)) return;
            if (!double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.CurrentCulture, out double value) &&
                !double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out value))
            {
                if (sender != null)
                {
                    MessageBox.Show("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                return;
            }
            if (double.IsInfinity(value) || double.IsNaN(value) || Math.Abs(value) > 1e15)
            {
                if (sender != null)
                {
                    MessageBox.Show("–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ!", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                return;
            }
            string fromUnit = cboFromUnit.SelectedItem?.ToString() ?? "";
            string toUnit = cboToUnit.SelectedItem?.ToString() ?? "";
            if (string.IsNullOrEmpty(fromUnit) || string.IsNullOrEmpty(toUnit))
            {
                if (sender != null)
                {
                    MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è!", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                return;
            }
            string type = cboType.SelectedItem?.ToString() ?? "";
            double result = ConvertUnit(value, type, fromUnit, toUnit);
            if (double.IsNaN(result))
            {
                if (sender != null)
                {
                    MessageBox.Show("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏!",
                        "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                return;
            }
            string format = useThousandsSeparator ? $"N{decimalPlaces}" : $"F{decimalPlaces}";
            txtOutput.Text = result.ToString(format);
            var historyEntry = new HistoryEntry
            {
                DateTime = DateTime.Now,
                Operation = $"{value} {fromUnit} -> {toUnit}",
                Result = $"{result.ToString(format)} {toUnit}",
                Type = "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
            };
            const int maxHistorySize = 1000;
            lock (historyLock)
            {
                conversionHistory.Add(historyEntry);
                if (conversionHistory.Count > maxHistorySize)
                {
                    var itemsToRemove = conversionHistory
                        .ToList()
                        .OrderBy(h => h.DateTime)
                        .Take(conversionHistory.Count - maxHistorySize)
                        .ToList();
                    foreach (var item in itemsToRemove)
                    {
                        conversionHistory.TryTake(out _);
                    }
                }
            }
            UpdateHistoryGrid();
            if (isAnimationEnabled)
            {
                AnimateArrow();
            }
            lblStatus.Text = "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞";
        }
        private double ConvertUnit(double value, string type, string fromUnit, string toUnit)
        {
            return ConvertUnitInternal(value, type, fromUnit, toUnit, 0);
        }
        private double ConvertUnitInternal(double value, string type, string fromUnit, string toUnit, int recursionDepth)
        {
            if (recursionDepth > 3)
            {
                System.Diagnostics.Debug.WriteLine($"Warning: Max recursion depth reached for conversion {fromUnit} to {toUnit}");
                return double.NaN;
            }
            if (fromUnit == toUnit)
            {
                return value;
            }
            if (type.Contains("–í–∞–ª—é—Ç–∞"))
            {
                return ConvertCurrency(value, fromUnit, toUnit);
            }
            if (type.Contains("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"))
            {
                return ConvertTemperature(value, fromUnit, toUnit);
            }
            var conversionFactors = GetConversionFactors();
            var key = (fromUnit, toUnit);
            if (conversionFactors.ContainsKey(key))
            {
                return value * conversionFactors[key];
            }
            var reverseKey = (toUnit, fromUnit);
            if (conversionFactors.ContainsKey(reverseKey))
            {
                return value / conversionFactors[reverseKey];
            }
            return ConvertThroughBase(value, type, fromUnit, toUnit, recursionDepth + 1);
        }
        private double ConvertCurrency(double value, string from, string to)
        {
            if (!currencyRates.ContainsKey(from) || !currencyRates.ContainsKey(to))
                return value;
            double usdValue = value / currencyRates[from];
            return usdValue * currencyRates[to];
        }
        private double ConvertTemperature(double value, string from, string to)
        {
            double celsius = value;
            switch (from)
            {
                case "¬∞F":
                    celsius = (value - 32) * 5 / 9;
                    break;
                case "K":
                    celsius = value - 273.15;
                    break;
                case "¬∞R":
                    celsius = (value - 491.67) * 5 / 9;
                    break;
            }
            switch (to)
            {
                case "¬∞C":
                    return celsius;
                case "¬∞F":
                    return celsius * 9 / 5 + 32;
                case "K":
                    return celsius + 273.15;
                case "¬∞R":
                    return celsius * 9 / 5 + 491.67;
            }
            return value;
        }
        private Dictionary<(string, string), double> GetConversionFactors()
        {
            return new Dictionary<(string, string), double>
            {
                [("cm", "m")] = 0.01, [("m", "km")] = 0.001, [("in", "cm")] = 2.54,
                [("ft", "m")] = 0.3048, [("yd", "m")] = 0.9144, [("mi", "km")] = 1.60934,
                [("m", "cm")] = 100, [("km", "m")] = 1000, [("cm", "in")] = 0.393701,
                [("m", "ft")] = 3.28084, [("m", "yd")] = 1.09361, [("km", "mi")] = 0.621371,
                [("m", "in")] = 39.3701, [("in", "m")] = 0.0254,
                [("m", "mi")] = 0.000621371, [("mi", "m")] = 1609.34,
                [("ft", "in")] = 12, [("in", "ft")] = 1.0/12.0,
                [("yd", "ft")] = 3, [("ft", "yd")] = 1.0/3.0,
                [("g", "kg")] = 0.001, [("kg", "t")] = 0.001, [("lb", "kg")] = 0.453592,
                [("oz", "g")] = 28.3495, [("kg", "g")] = 1000, [("t", "kg")] = 1000,
                [("kg", "lb")] = 2.20462, [("g", "oz")] = 0.035274,
                [("kg", "oz")] = 35.274, [("oz", "kg")] = 0.0283495,
                [("lb", "oz")] = 16, [("oz", "lb")] = 0.0625,
                [("g", "t")] = 0.000001, [("t", "g")] = 1000000,
                [("ml", "l")] = 0.001, [("l", "m¬≥")] = 0.001, [("gal", "l")] = 3.78541,
                [("pt", "l")] = 0.473176, [("l", "ml")] = 1000, [("m¬≥", "l")] = 1000,
                [("l", "gal")] = 0.264172, [("l", "pt")] = 2.11338,
                [("cm¬≤", "m¬≤")] = 0.0001, [("m¬≤", "km¬≤")] = 0.000001, [("ft¬≤", "m¬≤")] = 0.092903,
                [("ac", "m¬≤")] = 4046.86, [("m¬≤", "cm¬≤")] = 10000, [("km¬≤", "m¬≤")] = 1000000,
                [("m¬≤", "ft¬≤")] = 10.7639, [("m¬≤", "ac")] = 0.000247105,
                [("s", "min")] = 1/60.0, [("min", "h")] = 1/60.0, [("h", "d")] = 1/24.0,
                [("d", "week")] = 1/7.0, [("min", "s")] = 60, [("h", "min")] = 60,
                [("d", "h")] = 24, [("week", "d")] = 7,
                [("s", "h")] = 1/3600.0, [("h", "s")] = 3600,
                [("s", "d")] = 1/86400.0, [("d", "s")] = 86400,
                [("s", "week")] = 1/604800.0, [("week", "s")] = 604800,
                [("min", "d")] = 1/1440.0, [("d", "min")] = 1440,
                [("min", "week")] = 1/10080.0, [("week", "min")] = 10080,
                [("h", "week")] = 1/168.0, [("week", "h")] = 168,
                [("J", "kJ")] = 0.001, [("cal", "J")] = 4.184, [("kWh", "J")] = 3.6e6,
                [("kJ", "J")] = 1000, [("J", "cal")] = 1.0/4.184, [("J", "kWh")] = 1/3.6e6,
                [("kJ", "cal")] = 1000.0/4.184, [("cal", "kJ")] = 4.184/1000.0,
                [("kJ", "kWh")] = 1/3600.0, [("kWh", "kJ")] = 3600,
                [("cal", "kWh")] = 4.184/3.6e6, [("kWh", "cal")] = 3.6e6/4.184,
                [("W", "kW")] = 0.001, [("hp", "kW")] = 0.7457,
                [("kW", "W")] = 1000, [("kW", "hp")] = 1.34102,
                [("W", "hp")] = 0.00134102, [("hp", "W")] = 745.7,
                [("Pa", "kPa")] = 0.001, [("atm", "kPa")] = 101.325, [("bar", "kPa")] = 100,
                [("kPa", "Pa")] = 1000, [("kPa", "atm")] = 0.00986923, [("kPa", "bar")] = 0.01,
                [("Pa", "atm")] = 9.86923e-6, [("atm", "Pa")] = 101325,
                [("Pa", "bar")] = 1e-5, [("bar", "Pa")] = 100000,
                [("atm", "bar")] = 1.01325, [("bar", "atm")] = 0.986923
            };
        }
        private double ConvertThroughBase(double value, string type, string from, string to, int recursionDepth)
        {
            var baseUnits = new Dictionary<string, string>
            {
                ["üìè –î–ª–∏–Ω–∞"] = "m", ["‚öñÔ∏è –ú–∞—Å—Å–∞"] = "kg", ["üìä –û–±—ä–µ–º"] = "l",
                ["üìê –ü–ª–æ—â–∞–¥—å"] = "m¬≤", ["üïê –í—Ä–µ–º—è"] = "s", ["‚ö° –≠–Ω–µ—Ä–≥–∏—è"] = "J",
                ["üí™ –ú–æ—â–Ω–æ—Å—Ç—å"] = "W", ["üåä –î–∞–≤–ª–µ–Ω–∏–µ"] = "Pa"
            };
            if (!baseUnits.ContainsKey(type)) return value;
            string baseUnit = baseUnits[type];
            double baseValue = ConvertUnitInternal(value, type, from, baseUnit, recursionDepth);
            return ConvertUnitInternal(baseValue, type, baseUnit, to, recursionDepth);
        }
        private void AnimateArrow()
        {
            if (arrowLabel == null) return;
            System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
            timer.Interval = 50;
            int angle = 0;
            timer.Tick += (s, e) =>
            {
                angle += 30;
                if (angle >= 360)
                {
                    timer.Stop();
                    timer.Dispose();
                    arrowLabel.Text = "->";
                }
                else
                {
                    string[] arrows = { "->", "\\", "|", "/", "<-", "/", "|", "\\" };
                    arrowLabel.Text = arrows[(angle / 45) % 8];
                }
            };
            timer.Start();
        }
        private void BtnClear_Click(object sender, EventArgs e)
        {
            txtInput.Text = "";
            txtOutput.Text = "";
            cboType.SelectedIndex = 0;
            lblStatus.Text = "–û—á–∏—â–µ–Ω–æ";
        }
        private void CalcButton_Click(object sender, EventArgs e)
        {
            Button button = sender as Button;
            if (button == null) return;
            string buttonText = button.Text;
            
            TextBox currentDisplay = (mainTabControl != null && mainTabControl.SelectedTab == tabCalculator)
                ? calcTabDisplay : null;
            if (currentDisplay == null) return;
            
            switch (buttonText)
            {
                case "0":
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    if (calcNewNumber || currentDisplay.Text == "0")
                    {
                        currentDisplay.Text = buttonText;
                        calcNewNumber = false;
                    }
                    else
                    {
                        currentDisplay.Text += buttonText;
                    }
                    break;
                    
                case ".":
                    if (!currentDisplay.Text.Contains("."))
                    {
                        currentDisplay.Text += ".";
                        calcNewNumber = false;
                    }
                    break;
                    
                case "+":
                case "-":
                case "√ó":
                case "√∑":
                case "%":
                    SetOperation(buttonText);
                    break;
                    
                case "=":
                    PerformCalculation();
                    break;
                    
                case "C":
                case "CE":
                    currentDisplay.Text = "0";
                    calcMemory = 0;
                    calcOperation = "";
                    calcNewNumber = true;
                    break;
                    
                case "‚Üê":
                    if (currentDisplay.Text.Length > 1)
                    {
                        currentDisplay.Text = currentDisplay.Text.Substring(0, currentDisplay.Text.Length - 1);
                    }
                    else
                    {
                        currentDisplay.Text = "0";
                        calcNewNumber = true;
                    }
                    break;
                    
                case "¬±":
                    if (double.TryParse(currentDisplay.Text, out double value))
                    {
                        currentDisplay.Text = (-value).ToString();
                    }
                    break;
            }
        }
        private void SetOperation(string op)
        {
            if (!string.IsNullOrEmpty(calcOperation) && !calcNewNumber)
            {
                PerformCalculation();
            }
            TextBox currentDisplay = (mainTabControl != null && mainTabControl.SelectedTab == tabCalculator)
                ? calcTabDisplay : null;
            if (currentDisplay != null && double.TryParse(currentDisplay.Text, out double value))
            {
                calcMemory = value;
                calcOperation = op;
                calcNewNumber = true;
            }
        }
        private void PerformCalculation()
        {
            if (string.IsNullOrEmpty(calcOperation)) return;
            TextBox currentDisplay = (mainTabControl != null && mainTabControl.SelectedTab == tabCalculator)
                ? calcTabDisplay : null;
            if (currentDisplay == null) return;
            if (double.TryParse(currentDisplay.Text, out double currentValue))
            {
                double result = 0;
                switch (calcOperation)
                {
                    case "+":
                        result = calcMemory + currentValue;
                        break;
                    case "-":
                        result = calcMemory - currentValue;
                        break;
                    case "√ó":
                        result = calcMemory * currentValue;
                        break;
                    case "√∑":
                        if (currentValue != 0)
                            result = calcMemory / currentValue;
                        else
                        {
                            currentDisplay.Text = "–û—à–∏–±–∫–∞";
                            calcMemory = 0;
                            calcOperation = "";
                            calcNewNumber = true;
                            return;
                        }
                        break;
                    case "%":
                        result = calcMemory * currentValue / 100;
                        break;
                }
                string resultText = result.ToString();
                if (resultText.Length > 15)
                {
                    resultText = result.ToString("E5");
                }
                currentDisplay.Text = resultText;
                string operation = $"{calcMemory} {calcOperation} {currentValue} = {result}";
                calcHistory.Add(operation);
                var historyEntry = new HistoryEntry
                {
                    DateTime = DateTime.Now,
                    Operation = operation,
                    Result = result.ToString(),
                    Type = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
                };
                conversionHistory.Add(historyEntry);
                EnforceHistoryLimit();
                UpdateHistoryGrid();
                calcMemory = result;
                calcOperation = "";
                calcNewNumber = true;
            }
        }
        private void UpdateHistoryGrid()
        {
            if (historyDataGrid == null) return;
            historyDataGrid.Rows.Clear();
            var filter = cboHistoryFilter?.SelectedItem?.ToString() ?? "–í—Å–µ";
            var searchText = txtHistorySearch?.Text?.ToLower() ?? "";
            bool hasSearchText = !string.IsNullOrEmpty(searchText);
            const int maxDisplayItems = 100;
            List<HistoryEntry> historyList;
            lock (historyLock)
            {
                historyList = conversionHistory.ToList();
            }
            var filteredHistory = historyList
                .Where(h =>
                {
                    if (filter != "–í—Å–µ" && h.Type != filter)
                        return false;
                    if (hasSearchText)
                    {
                        var operationLower = h.Operation?.ToLower() ?? "";
                        var resultLower = h.Result?.ToLower() ?? "";
                        if (!operationLower.Contains(searchText) && !resultLower.Contains(searchText))
                            return false;
                    }
                    return true;
                })
                .OrderByDescending(h => h.DateTime)
                .Take(maxDisplayItems);
            foreach (var entry in filteredHistory)
            {
                historyDataGrid.Rows.Add(
                    entry.DateTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    entry.Operation,
                    entry.Result
                );
            }
            if (historyList.Count > maxDisplayItems)
            {
                lblStatus.Text = $"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {maxDisplayItems} –∑–∞–ø–∏—Å–µ–π –∏–∑ {historyList.Count}";
            }
        }
        private void BtnHistorySearch_Click(object sender, EventArgs e)
        {
            UpdateHistoryGrid();
        }
        private void CboHistoryFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateHistoryGrid();
        }
        private void BtnClearHistory_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                lock (historyLock)
                {
                    while (conversionHistory.TryTake(out _)) { }
                }
                UpdateHistoryGrid();
                lblStatus.Text = "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞";
            }
        }
        private void BtnExportCSV_Click(object sender, EventArgs e)
        {
            using (var saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "CSV —Ñ–∞–π–ª—ã (*.csv)|*.csv";
                saveDialog.FileName = $"history_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
                if (saveDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        using (var writer = new StreamWriter(saveDialog.FileName, false, Encoding.UTF8))
                        {
                            writer.WriteLine("–î–∞—Ç–∞/–í—Ä–µ–º—è,–û–ø–µ—Ä–∞—Ü–∏—è,–†–µ–∑—É–ª—å—Ç–∞—Ç,–¢–∏–ø");
                            List<HistoryEntry> historyList;
                            lock (historyLock)
                            {
                                historyList = conversionHistory.ToList();
                            }
                            foreach (var entry in historyList.OrderByDescending(h => h.DateTime))
                            {
                                writer.WriteLine($"{entry.DateTime:yyyy-MM-dd HH:mm:ss}," +
                                    $"\"{entry.Operation}\",\"{entry.Result}\",{entry.Type}");
                            }
                        }
                        lblStatus.Text = "–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ CSV";
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {ex.Message}",
                            "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }
        private void BtnExportPDF_Click(object sender, EventArgs e)
        {
            SaveAsPDF(null);
        }
        private void BtnExport_Click(object sender, EventArgs e)
        {
            SaveFile_Click(sender, e);
        }
        private void BtnExportPrint_Click(object sender, EventArgs e)
        {
            SaveFile_Click(sender, e);
            PrintThroughBrowser();
        }
        private void EnableDragDrop()
        {
            cboFromUnit.AllowDrop = true;
            cboToUnit.AllowDrop = true;
            cboFromUnit.DragEnter += (s, e) => e.Effect = DragDropEffects.Move;
            cboToUnit.DragEnter += (s, e) => e.Effect = DragDropEffects.Move;
            cboFromUnit.DragDrop += (s, e) =>
            {
                var data = e.Data.GetData(DataFormats.Text)?.ToString();
                if (!string.IsNullOrEmpty(data) && cboFromUnit.Items.Contains(data))
                {
                    string temp = cboFromUnit.SelectedItem?.ToString();
                    cboFromUnit.SelectedItem = data;
                    if (!string.IsNullOrEmpty(temp) && cboToUnit.Items.Contains(temp))
                    {
                        cboToUnit.SelectedItem = temp;
                    }
                }
            };
            cboToUnit.DragDrop += (s, e) =>
            {
                var data = e.Data.GetData(DataFormats.Text)?.ToString();
                if (!string.IsNullOrEmpty(data) && cboToUnit.Items.Contains(data))
                {
                    string temp = cboToUnit.SelectedItem?.ToString();
                    cboToUnit.SelectedItem = data;
                    if (!string.IsNullOrEmpty(temp) && cboFromUnit.Items.Contains(temp))
                    {
                        cboFromUnit.SelectedItem = temp;
                    }
                }
            };
        }
        private void MainTabControl_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (mainTabControl.SelectedTab == tabHistory)
            {
                UpdateHistoryGrid();
            }
        }
        private void BtnApplySettings_Click(object sender, EventArgs e)
        {
            decimalPlaces = (int)numDecimalPlaces.Value;
            useThousandsSeparator = chkThousandsSeparator.Checked;
            isAnimationEnabled = chkAnimations.Checked;
            isAutoConvertEnabled = chkScientificNotation.Checked;
            ApplyTheme();
            lblStatus.Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã";
        }
        private void BtnSaveSettings_Click(object sender, EventArgs e)
        {
            BtnApplySettings_Click(sender, e);
            SaveSettings();
            lblStatus.Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã";
        }
        private void BtnResetSettings_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                numDecimalPlaces.Value = 2;
                chkThousandsSeparator.Checked = true;
                chkAnimations.Checked = true;
                chkScientificNotation.Checked = false;
                chkSoundEffects.Checked = false;
                cboTheme.SelectedIndex = 0;
                BtnApplySettings_Click(sender, e);
                lblStatus.Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã";
            }
        }
        private void ApplyTheme()
        {
            var theme = cboTheme.SelectedItem?.ToString() ?? "–°–≤–µ—Ç–ª–∞—è";
            Color backColor = Color.FromArgb(245, 245, 245);
            Color foreColor = Color.Black;
            Color panelColor = Color.White;
            if (theme == "–¢–µ–º–Ω–∞—è")
            {
                backColor = Color.FromArgb(45, 45, 48);
                foreColor = Color.White;
                panelColor = Color.FromArgb(30, 30, 30);
            }
            ApplyThemeToControl(this, backColor, foreColor, panelColor);
        }
        private void ApplyThemeToControl(Control control, Color backColor, Color foreColor, Color panelColor)
        {
            Color buttonBackColor = Color.FromArgb(70, 70, 70);
            Color buttonForeColor = Color.White;
            
            if (cboTheme.SelectedItem?.ToString() == "–°–≤–µ—Ç–ª–∞—è")
            {
                buttonBackColor = Color.FromArgb(225, 225, 225);
                buttonForeColor = Color.Black;
            }

            if (control is Button btn)
            {
                btn.BackColor = buttonBackColor;
                btn.ForeColor = buttonForeColor;
                btn.FlatStyle = FlatStyle.Flat;
                btn.FlatAppearance.BorderColor = Color.FromArgb(100, 100, 100);
                return;
            }
            
            if (control is ComboBox cbo)
            {
                cbo.BackColor = buttonBackColor;
                cbo.ForeColor = buttonForeColor;
                cbo.FlatStyle = FlatStyle.Flat;
                return;
            }
            
            if (control is TextBox txt)
            {
                txt.BackColor = buttonBackColor;
                txt.ForeColor = buttonForeColor;
                txt.BorderStyle = BorderStyle.FixedSingle;
                return;
            }
            
            control.BackColor = control is Panel || control is GroupBox ? panelColor : backColor;
            control.ForeColor = foreColor;
            
            foreach (Control child in control.Controls)
            {
                ApplyThemeToControl(child, backColor, foreColor, panelColor);
            }
        }
        private string GetSettingsFilePath()
        {
            string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string appFolder = Path.Combine(appDataPath, "ConverterApp");
            if (!Directory.Exists(appFolder))
            {
                Directory.CreateDirectory(appFolder);
            }
            return Path.Combine(appFolder, "settings.json");
        }
        private void UpdateNumberFormatPreview()
        {
            if (txtOutput != null && !string.IsNullOrEmpty(txtOutput.Text))
            {
                if (double.TryParse(txtOutput.Text.Replace(",", "").Replace(" ", ""), out double value))
                {
                    txtOutput.Text = FormatNumber(value);
                }
            }
        }
        private string FormatNumber(double value)
        {
            string format = useThousandsSeparator ? "N" : "F";
            format += decimalPlaces.ToString();
            if (Math.Abs(value) >= 1e9 || (Math.Abs(value) < 0.0001 && value != 0))
            {
                return value.ToString($"E{decimalPlaces}");
            }
            return value.ToString(format);
        }
        private void ExportPDF_Click(object sender, EventArgs e)
        {
            SaveAsPDF(null);
        }
        private void ExportCSV_Click(object sender, EventArgs e)
        {
            BtnExportCSV_Click(sender, e);
        }
        private void ExportTXT_Click(object sender, EventArgs e)
        {
            using (var saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)|*.txt";
                saveDialog.FileName = $"converter_export_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
                if (saveDialog.ShowDialog() == DialogResult.OK)
                {
                    SaveAsText(saveDialog.FileName);
                }
            }
        }
        private void ExportPNG_Click(object sender, EventArgs e)
        {
            using (var saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "PNG —Ñ–∞–π–ª—ã (*.png)|*.png";
                saveDialog.FileName = $"converter_screenshot_{DateTime.Now:yyyyMMdd_HHmmss}.png";
                if (saveDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        using (Bitmap bitmap = new Bitmap(this.Width, this.Height))
                        {
                            this.DrawToBitmap(bitmap, new Rectangle(0, 0, this.Width, this.Height));
                            bitmap.Save(saveDialog.FileName, System.Drawing.Imaging.ImageFormat.Png);
                            lblStatus.Text = "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω";
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {ex.Message}",
                            "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }
        private void PrintThroughBrowser()
        {
            try
            {
                string htmlContent = GenerateHTMLReport();
                string tempPath = Path.GetTempFileName();
                tempPath = Path.ChangeExtension(tempPath, ".html");
                File.WriteAllText(tempPath, htmlContent, Encoding.UTF8);
                System.Diagnostics.Process.Start(tempPath);
                lblStatus.Text = "–û—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø–µ—á–∞—Ç–∏";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML –æ—Ç—á–µ—Ç–∞: {ex.Message}",
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private string GenerateHTMLReport()
        {
            var sb = new StringBuilder();
            sb.AppendLine("<!DOCTYPE html>");
            sb.AppendLine("<html lang='ru'>");
            sb.AppendLine("<head>");
            sb.AppendLine("<meta charset='UTF-8'>");
            sb.AppendLine("<title>–û—Ç—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞</title>");
            sb.AppendLine("<style>");
            sb.AppendLine("body { font-family: 'Segoe UI', Arial, sans-serif; margin: 20px; }");
            sb.AppendLine("h1 { color: #333; text-align: center; }");
            sb.AppendLine("h2 { color: #555; border-bottom: 2px solid #ddd; padding-bottom: 5px; }");
            sb.AppendLine("table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }");
            sb.AppendLine("th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }");
            sb.AppendLine("th { background-color: #f5f5f5; font-weight: bold; }");
            sb.AppendLine("tr:nth-child(even) { background-color: #f9f9f9; }");
            sb.AppendLine(".current-result { background-color: #e8f4fd; padding: 15px; border-radius: 5px; margin: 20px 0; }");
            sb.AppendLine(".footer { text-align: center; color: #666; margin-top: 30px; font-size: 0.9em; }");
            sb.AppendLine("@media print { .no-print { display: none; } }");
            sb.AppendLine("</style>");
            sb.AppendLine("</head>");
            sb.AppendLine("<body>");
            sb.AppendLine("<h1>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –û—Ç—á–µ—Ç</h1>");
            sb.AppendLine($"<p style='text-align: center; color: #666;'>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {DateTime.Now:dd.MM.yyyy HH:mm:ss}</p>");
            if (!string.IsNullOrEmpty(txtInput.Text) && !string.IsNullOrEmpty(txtOutput.Text))
            {
                sb.AppendLine("<div class='current-result'>");
                sb.AppendLine("<h2>–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</h2>");
                sb.AppendLine($"<p><strong>–¢–∏–ø:</strong> {cboType.SelectedItem}</p>");
                sb.AppendLine($"<p><strong>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</strong> {txtInput.Text} {cboFromUnit.SelectedItem} = {txtOutput.Text} {cboToUnit.SelectedItem}</p>");
                sb.AppendLine("</div>");
            }
            sb.AppendLine("<h2>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π</h2>");
            var conversionHistoryList = conversionHistory.Where(h => h.Type != "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä").Take(50).ToList();
            if (conversionHistoryList.Any())
            {
                sb.AppendLine("<table>");
                sb.AppendLine("<tr><th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th><th>–û–ø–µ—Ä–∞—Ü–∏—è</th><th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th></tr>");
                foreach (var entry in conversionHistoryList.OrderByDescending(h => h.DateTime))
                {
                    sb.AppendLine($"<tr><td>{entry.DateTime:dd.MM.yyyy HH:mm:ss}</td><td>{entry.Operation}</td><td>{entry.Result}</td></tr>");
                }
                sb.AppendLine("</table>");
            }
            else
            {
                sb.AppendLine("<p>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –ø—É—Å—Ç–∞</p>");
            }
            sb.AppendLine("<h2>–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</h2>");
            if (calcHistory.Any())
            {
                sb.AppendLine("<table>");
                sb.AppendLine("<tr><th>‚Ññ</th><th>–í—ã—á–∏—Å–ª–µ–Ω–∏–µ</th></tr>");
                int index = 1;
                foreach (var calc in calcHistory.Take(30))
                {
                    sb.AppendLine($"<tr><td>{index++}</td><td>{calc}</td></tr>");
                }
                sb.AppendLine("</table>");
            }
            else
            {
                sb.AppendLine("<p>–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø—É—Å—Ç–∞</p>");
            }
            sb.AppendLine("<div class='footer'>");
            sb.AppendLine($"<p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä v1.0 ¬© 2025 –ß—É–º–∞—á–µ–Ω–∫–æ –î–∞–Ω–∏–∏–ª</p>");
            sb.AppendLine("<p class='no-print'><strong>–î–ª—è –ø–µ—á–∞—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+P –∏–ª–∏ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞ –§–∞–π–ª ‚Üí –ü–µ—á–∞—Ç—å</strong></p>");
            sb.AppendLine("</div>");
            sb.AppendLine("</body>");
            sb.AppendLine("</html>");
            return sb.ToString();
        }
        private void ShowUserManual_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–†–£–ö–û–í–û–î–°–¢–í–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n\n" +
                "1. –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ï–î–ò–ù–ò–¶:\n" +
                "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ\n" +
                "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –∏ —Ü–µ–ª–µ–≤—É—é –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è\n" +
                "   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n" +
                "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å' –∏–ª–∏ Enter\n\n" +
                "2. –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†:\n" +
                "   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'\n" +
                "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª –∏ –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
                "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '=' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n" +
                "3. –ò–°–¢–û–†–ò–Ø:\n" +
                "   ‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n" +
                "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n" +
                "   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n\n" +
                "4. –ù–ê–°–¢–†–û–ô–ö–ò:\n" +
                "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤\n" +
                "   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n" +
                "   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ/–æ—Ç–∫–ª—é—á–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏–∏",
                "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowQuickStart_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–ë–´–°–¢–†–´–ô –°–¢–ê–†–¢\n\n" +
                "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –î–ª–∏–Ω–∞)\n" +
                "2. –í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º ‚Üí –∫–º)\n" +
                "3. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000)\n" +
                "4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n" +
                "–ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´:\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏\n" +
                "‚Ä¢ Enter –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ\n" +
                "‚Ä¢ Escape –æ—á–∏—â–∞–µ—Ç –ø–æ–ª—è\n" +
                "‚Ä¢ Ctrl+S —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowCalculatorHelp_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†\n\n" +
                "–ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò:\n" +
                "‚Ä¢ –°–ª–æ–∂–µ–Ω–∏–µ: +\n" +
                "‚Ä¢ –í—ã—á–∏—Ç–∞–Ω–∏–µ: -\n" +
                "‚Ä¢ –£–º–Ω–æ–∂–µ–Ω–∏–µ: √ó\n" +
                "‚Ä¢ –î–µ–ª–µ–Ω–∏–µ: √∑\n" +
                "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: %\n\n" +
                "–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò:\n" +
                "‚Ä¢ C - –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞\n" +
                "‚Ä¢ CE - –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞\n" +
                "‚Ä¢ ‚Üê - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã\n" +
                "‚Ä¢ ¬± - —Å–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ —á–∏—Å–ª–∞\n\n" +
                "–ö–õ–ê–í–ò–ê–¢–£–†–ê:\n" +
                "‚Ä¢ –¶–∏—Ñ—Ä—ã 0-9 –¥–ª—è –≤–≤–æ–¥–∞\n" +
                "‚Ä¢ +, -, *, / –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
                "‚Ä¢ Enter –∏–ª–∏ = –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n" +
                "‚Ä¢ Escape –¥–ª—è –æ—á–∏—Å—Ç–∫–∏",
                "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowFormulas_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–§–û–†–ú–£–õ–´ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò\n\n" +
                "–¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:\n" +
                "‚Ä¢ ¬∞C ‚Üí ¬∞F: (C √ó 9/5) + 32\n" +
                "‚Ä¢ ¬∞C ‚Üí K: C + 273.15\n\n" +
                "–î–õ–ò–ù–ê:\n" +
                "‚Ä¢ 1 –∫–º = 1000 –º\n" +
                "‚Ä¢ 1 –º = 100 —Å–º\n" +
                "‚Ä¢ 1 –º–∏–ª—è = 1.60934 –∫–º\n" +
                "‚Ä¢ 1 —Ñ—É—Ç = 0.3048 –º\n\n" +
                "–ú–ê–°–°–ê:\n" +
                "‚Ä¢ 1 –∫–≥ = 1000 –≥\n" +
                "‚Ä¢ 1 —Ñ—É–Ω—Ç = 0.453592 –∫–≥\n" +
                "‚Ä¢ 1 —É–Ω—Ü–∏—è = 28.3495 –≥\n\n" +
                "–û–ë–™–ï–ú:\n" +
                "‚Ä¢ 1 –ª = 1000 –º–ª\n" +
                "‚Ä¢ 1 –≥–∞–ª–ª–æ–Ω = 3.78541 –ª\n\n" +
                "–í—Å–µ —Ñ–æ—Ä–º—É–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                "–§–æ—Ä–º—É–ª—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowUnitsTable_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–¢–ê–ë–õ–ò–¶–ê –ï–î–ò–ù–ò–¶ –ò–ó–ú–ï–†–ï–ù–ò–Ø\n\n" +
                "üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: ¬∞C, ¬∞F, K, ¬∞R\n" +
                "üìè –î–õ–ò–ù–ê: —Å–º, –º, –∫–º, –¥—é–π–º, —Ñ—É—Ç, —è—Ä–¥, –º–∏–ª—è\n" +
                "‚öñÔ∏è –ú–ê–°–°–ê: –≥, –∫–≥, —Ç, —Ñ—É–Ω—Ç, —É–Ω—Ü–∏—è\n" +
                "üìä –û–ë–™–ï–ú: –º–ª, –ª, –º¬≥, –≥–∞–ª–ª–æ–Ω, –ø–∏–Ω—Ç–∞\n" +
                "üìê –ü–õ–û–©–ê–î–¨: —Å–º¬≤, –º¬≤, –∫–º¬≤, —Ñ—É—Ç¬≤, –∞–∫—Ä\n" +
                "üïê –í–†–ï–ú–Ø: —Å, –º–∏–Ω, —á, –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è\n" +
                "‚ö° –≠–ù–ï–†–ì–ò–Ø: –î–∂, –∫–î–∂, –∫–∞–ª, –∫–í—Ç‚ãÖ—á\n" +
                "üí™ –ú–û–©–ù–û–°–¢–¨: –í—Ç, –∫–í—Ç, –ª.—Å.\n" +
                "üåä –î–ê–í–õ–ï–ù–ò–ï: –ü–∞, –∫–ü–∞, –∞—Ç–º, –±–∞—Ä\n" +
                "üí∞ –í–ê–õ–Æ–¢–ê: USD, EUR, RUB, GBP, JPY\n\n" +
                "–í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 40 –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è!",
                "–¢–∞–±–ª–∏—Ü–∞ –µ–¥–∏–Ω–∏—Ü",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowHotkeys_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò\n\n" +
                "–û–°–ù–û–í–ù–´–ï:\n" +
                "‚Ä¢ F1 - –°–ø—Ä–∞–≤–∫–∞\n" +
                "‚Ä¢ Ctrl+O - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª\n" +
                "‚Ä¢ Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å\n" +
                "‚Ä¢ Ctrl+Shift+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫\n" +
                "‚Ä¢ Ctrl+P - –ü–µ—á–∞—Ç—å\n" +
                "‚Ä¢ Alt+F4 - –í—ã—Ö–æ–¥\n\n" +
                "–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø:\n" +
                "‚Ä¢ Enter - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n" +
                "‚Ä¢ Escape - –û—á–∏—Å—Ç–∏—Ç—å\n" +
                "‚Ä¢ Tab - –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏\n\n" +
                "–ù–ê–í–ò–ì–ê–¶–ò–Ø:\n" +
                "‚Ä¢ Ctrl+Tab - –°–ª–µ–¥—É—é—â–∞—è –≤–∫–ª–∞–¥–∫–∞\n" +
                "‚Ä¢ Ctrl+Shift+Tab - –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞\n\n" +
                "–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†:\n" +
                "‚Ä¢ 0-9 - –í–≤–æ–¥ —Ü–∏—Ñ—Ä\n" +
                "‚Ä¢ +,-,*,/ - –û–ø–µ—Ä–∞—Ü–∏–∏\n" +
                "‚Ä¢ = –∏–ª–∏ Enter - –†–µ–∑—É–ª—å—Ç–∞—Ç\n" +
                "‚Ä¢ Escape - –û—á–∏—Å—Ç–∫–∞",
                "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void CheckUpdates_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...\n\n" +
                "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: 1.0\n" +
                "–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: 1.0\n\n" +
                "–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã!",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ReportBug_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–°–û–û–ë–©–ò–¢–¨ –û–ë –û–®–ò–ë–ö–ï\n\n" +
                "–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã,\n" +
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n\n" +
                "Email: danyachumachenko2007@gmail.com\n" +
                "–¢–µ–º–∞: ConverterApp - –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ\n\n" +
                "–í –ø–∏—Å—å–º–µ —É–∫–∞–∂–∏—Ç–µ:\n" +
                "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n" +
                "‚Ä¢ –®–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n" +
                "‚Ä¢ –í–µ—Ä—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã (1.0)\n\n" +
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã!",
                "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void About_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ö–û–ù–í–ï–†–¢–ï–†\n" +
                "–í–µ—Ä—Å–∏—è 1.0\n\n" +
                "¬© 2025 –ß—É–º–∞—á–µ–Ω–∫–æ –î–∞–Ω–∏–∏–ª\n\n" +
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è\n" +
                "–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.\n\n" +
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n" +
                "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–æ–ª–µ–µ 40 –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è\n" +
                "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n" +
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
                "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n" +
                "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n" +
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n" +
                "Email: danyachumachenko2007@gmail.com",
                "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ImportHistory_Click(object sender, EventArgs e)
        {
            using (var openDialog = new OpenFileDialog())
            {
                openDialog.Filter = "JSON —Ñ–∞–π–ª—ã (*.json)|*.json|–í—Å–µ —Ñ–∞–π–ª—ã (*.*)|*.*";
                openDialog.Title = "–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π";
                if (openDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        string json = File.ReadAllText(openDialog.FileName);
                        var importedHistory = Newtonsoft.Json.JsonConvert.DeserializeObject<List<HistoryEntry>>(json);
                        foreach (var entry in importedHistory)
                        {
                            conversionHistory.Add(entry);
                        }
                        UpdateHistoryDisplay();
                        MessageBox.Show($"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {importedHistory.Count} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏", "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }
        private void ShowTips_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–°–û–í–ï–¢–´ –ò –•–ò–¢–†–û–°–¢–ò\n\n" +
                "üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n" +
                "‚Ä¢ Ctrl+Enter - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n" +
                "‚Ä¢ Ctrl+Delete - –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è\n" +
                "‚Ä¢ F1 - –°–ø—Ä–∞–≤–∫–∞\n" +
                "‚Ä¢ Ctrl+E - –≠–∫—Å–ø–æ—Ä—Ç\n\n" +
                "‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥:\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n" +
                "‚Ä¢ –í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –ø—Ä—è–º–æ –≤ –ø–æ–ª–µ\n" +
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n" +
                "üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n" +
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π\n\n" +
                "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:\n" +
                "‚Ä¢ PDF –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤\n" +
                "‚Ä¢ CSV –¥–ª—è Excel\n" +
                "‚Ä¢ PNG –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π",
                "–°–æ–≤–µ—Ç—ã –∏ —Ö–∏—Ç—Ä–æ—Å—Ç–∏",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowContacts_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\n" +
                "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:\n" +
                "–ß—É–º–∞—á–µ–Ω–∫–æ –î–∞–Ω–∏–∏–ª\n\n" +
                "üìß Email:\n" +
                "danyachumachenko2007@gmail.com\n\n" +
                "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n" +
                "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n" +
                "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n" +
                "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n" +
                "‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:\n" +
                "–û–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤\n\n" +
                "üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" +
                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è\n" +
                "–ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ",
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void ShowLicense_Click(object sender, EventArgs e)
        {
            MessageBox.Show(
                "–õ–ò–¶–ï–ù–ó–ò–û–ù–ù–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï\n\n" +
                "ConverterApp –≤–µ—Ä—Å–∏—è 1.0\n" +
                "¬© 2025 –ß—É–º–∞—á–µ–Ω–∫–æ –î–∞–Ω–∏–∏–ª\n\n" +
                "üìã –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n" +
                "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û:\n" +
                "‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö\n" +
                "‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n" +
                "‚ùå –ó–ê–ü–†–ï–©–ï–ù–û:\n" +
                "‚Ä¢ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã\n" +
                "‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n" +
                "‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n" +
                "‚ö†Ô∏è –û–¢–ö–ê–ó –û–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:\n" +
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è '–∫–∞–∫ –µ—Å—Ç—å'.\n" +
                "–ê–≤—Ç–æ—Ä –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ\n" +
                "—É–±—ã—Ç–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n" +
                "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.",
                "–õ–∏—Ü–µ–Ω–∑–∏—è",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
        private void InitializeBasicCalculatorButtons()
        {
            string[,] basicLayout = {
                { "7", "8", "9", "√∑" },
                { "4", "5", "6", "√ó" },
                { "1", "2", "3", "-" },
                { "0", ".", "=", "+" },
                { "C", "CE", "‚Üê", "¬±" }
            };
            if (calcTabButtonPanel != null)
            {
                calcTabButtonPanel.Controls.Clear();
                calcTabButtonPanel.ColumnCount = 4;
                calcTabButtonPanel.RowCount = 5;
                for (int i = 0; i < 4; i++)
                {
                    if (i < calcTabButtonPanel.ColumnStyles.Count)
                        calcTabButtonPanel.ColumnStyles[i] = new ColumnStyle(SizeType.Percent, 25F);
                    else
                        calcTabButtonPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25F));
                }
                for (int i = 0; i < 5; i++)
                {
                    if (i < calcTabButtonPanel.RowStyles.Count)
                        calcTabButtonPanel.RowStyles[i] = new RowStyle(SizeType.Percent, 20F);
                    else
                        calcTabButtonPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 20F));
                }
                for (int row = 0; row < 5; row++)
                {
                    for (int col = 0; col < 4; col++)
                    {
                        var btn = CreateCalculatorButton(basicLayout[row, col]);
                        btn.Font = new Font("Segoe UI", 14F);
                        calcTabButtonPanel.Controls.Add(btn, col, row);
                    }
                }
            }
        }
        private Button CreateCalculatorButton(string text)
        {
            var button = new Button();
            button.Text = text;
            button.Dock = DockStyle.Fill;
            button.Font = new Font("Segoe UI", 14F);
            button.FlatStyle = FlatStyle.Flat;
            button.BackColor = Color.White;
            button.FlatAppearance.BorderColor = Color.FromArgb(200, 200, 200);
            button.Cursor = Cursors.Hand;
            button.Margin = new Padding(2);
            if ("+-√ó√∑=%".Contains(text) && text.Length == 1)
            {
                button.BackColor = Color.FromArgb(33, 150, 243);
                button.ForeColor = Color.White;
            }
            else if (text == "CE" || text == "C" || text == "AC")
            {
                button.BackColor = Color.FromArgb(244, 67, 54);
                button.ForeColor = Color.White;
            }
            button.Click += CalcButton_Click;
            return button;
        }

        private void LoadSettings()
        {
            try
            {
                string settingsPath = GetSettingsFilePath();
                if (File.Exists(settingsPath))
                {
                    string json = File.ReadAllText(settingsPath);
                    var settings = Newtonsoft.Json.JsonConvert.DeserializeObject<AppSettings>(json);
                    if (settings != null)
                    {
                        decimalPlaces = settings.DecimalPlaces;
                        useThousandsSeparator = settings.UseThousandsSeparator;
                        isAnimationEnabled = settings.AnimationsEnabled;
                        isAutoConvertEnabled = settings.AutoConvert;
                        if (numDecimalPlaces != null) numDecimalPlaces.Value = decimalPlaces;
                        if (chkThousandsSeparator != null) chkThousandsSeparator.Checked = useThousandsSeparator;
                        if (chkAnimations != null) chkAnimations.Checked = isAnimationEnabled;
                        if (chkScientificNotation != null) chkScientificNotation.Checked = isAutoConvertEnabled;
                        if (cboTheme != null && !string.IsNullOrEmpty(settings.Theme))
                        {
                            int index = cboTheme.Items.IndexOf(settings.Theme);
                            if (index >= 0) cboTheme.SelectedIndex = index;
                        }
                        if (settings.WindowX != -1 && settings.WindowY != -1)
                        {
                            this.Location = new Point(settings.WindowX, settings.WindowY);
                        }
                        if (settings.WindowWidth > 0 && settings.WindowHeight > 0)
                        {
                            this.Size = new Size(settings.WindowWidth, settings.WindowHeight);
                        }
                        this.WindowState = settings.WindowState;
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error loading settings: {ex.Message}");
            }
        }

        private void SaveSettings()
        {
            try
            {
                var settings = new AppSettings
                {
                    DecimalPlaces = decimalPlaces,
                    UseThousandsSeparator = useThousandsSeparator,
                    AnimationsEnabled = isAnimationEnabled,
                    AutoConvert = isAutoConvertEnabled,
                    Theme = cboTheme?.SelectedItem?.ToString() ?? "–°–≤–µ—Ç–ª–∞—è",
                    WindowX = this.WindowState == FormWindowState.Normal ? this.Location.X : this.RestoreBounds.X,
                    WindowY = this.WindowState == FormWindowState.Normal ? this.Location.Y : this.RestoreBounds.Y,
                    WindowWidth = this.WindowState == FormWindowState.Normal ? this.Width : this.RestoreBounds.Width,
                    WindowHeight = this.WindowState == FormWindowState.Normal ? this.Height : this.RestoreBounds.Height,
                    WindowState = this.WindowState == FormWindowState.Minimized ? FormWindowState.Normal : this.WindowState
                };
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(settings, Newtonsoft.Json.Formatting.Indented);
                string settingsPath = GetSettingsFilePath();
                File.WriteAllText(settingsPath, json);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error saving settings: {ex.Message}");
            }
        }

        private void CboUnit_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (isUpdatingComboBox) return;
            if (isAutoConvertEnabled && !string.IsNullOrEmpty(txtInput.Text))
            {
                if (double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.CurrentCulture, out _) ||
                    double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out _))
                {
                    BtnConvert_Click(null, null);
                }
            }
        }

        private void TxtInput_TextChanged(object sender, EventArgs e)
        {
            if (isAutoConvertEnabled && !string.IsNullOrEmpty(txtInput.Text))
            {
                if (double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.CurrentCulture, out _) ||
                    double.TryParse(txtInput.Text, NumberStyles.Any, CultureInfo.InvariantCulture, out _))
                {
                    BtnConvert_Click(null, null);
                }
            }
        }

        private void OpenFile_Click(object sender, EventArgs e)
        {
            using (var openDialog = new OpenFileDialog())
            {
                openDialog.Filter = "JSON —Ñ–∞–π–ª—ã (*.json)|*.json|CSV —Ñ–∞–π–ª—ã (*.csv)|*.csv|–í—Å–µ —Ñ–∞–π–ª—ã (*.*)|*.*";
                if (openDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        string content = File.ReadAllText(openDialog.FileName);
                        if (Path.GetExtension(openDialog.FileName).ToLower() == ".csv")
                        {
                            ImportCSVData(content);
                        }
                        else
                        {
                            ImportJSONData(content);
                        }
                        lblStatus.Text = "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω";
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}", 
                            "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void SaveFile_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtInput.Text) && !string.IsNullOrEmpty(txtOutput.Text))
            {
                using (var saveDialog = new SaveFileDialog())
                {
                    saveDialog.Filter = "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)|*.txt|JSON —Ñ–∞–π–ª—ã (*.json)|*.json";
                    saveDialog.FileName = $"conversion_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
                    if (saveDialog.ShowDialog() == DialogResult.OK)
                    {
                        try
                        {
                            string content = $"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è\n" +
                                           $"–î–∞—Ç–∞: {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n" +
                                           $"–¢–∏–ø: {cboType.SelectedItem}\n" +
                                           $"–í–≤–æ–¥: {txtInput.Text} {cboFromUnit.SelectedItem}\n" +
                                           $"–†–µ–∑—É–ª—å—Ç–∞—Ç: {txtOutput.Text} {cboToUnit.SelectedItem}";
                            File.WriteAllText(saveDialog.FileName, content);
                            lblStatus.Text = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω";
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ex.Message}", 
                                "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void SaveAsFile_Click(object sender, EventArgs e)
        {
            SaveFile_Click(sender, e);
        }

        private void ImportData_Click(object sender, EventArgs e)
        {
            OpenFile_Click(sender, e);
        }


        private void SaveAsPDF(string filename)
        {
            using (var saveDialog = new SaveFileDialog())
            {
                saveDialog.Filter = "PDF —Ñ–∞–π–ª—ã (*.pdf)|*.pdf";
                saveDialog.FileName = filename ?? $"converter_report_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
                if (saveDialog.ShowDialog() == DialogResult.OK)
                {
                    try
                    {
                        using (PdfDocument document = new PdfDocument())
                        {
                            PdfPage page = document.AddPage();
                            XGraphics gfx = XGraphics.FromPdfPage(page);
                            XFont font = new XFont("Arial", 12);
                            XFont titleFont = new XFont("Arial", 16, XFontStyle.Bold);
                            double y = 40;
                            
                            gfx.DrawString("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –û—Ç—á–µ—Ç", titleFont, 
                                XBrushes.Black, 40, y);
                            y += 30;
                            
                            gfx.DrawString($"–î–∞—Ç–∞: {DateTime.Now:yyyy-MM-dd HH:mm:ss}", font, 
                                XBrushes.Black, 40, y);
                            y += 20;
                            
                            if (!string.IsNullOrEmpty(txtInput.Text) && !string.IsNullOrEmpty(txtOutput.Text))
                            {
                                gfx.DrawString("–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", font, XBrushes.Black, 40, y);
                                y += 20;
                                gfx.DrawString($"–¢–∏–ø: {cboType.SelectedItem}", font, 
                                    XBrushes.Black, 60, y);
                                y += 20;
                                gfx.DrawString($"{txtInput.Text} {cboFromUnit.SelectedItem} = " +
                                    $"{txtOutput.Text} {cboToUnit.SelectedItem}", font, 
                                    XBrushes.Black, 60, y);
                                y += 30;
                            }
                            
                            gfx.DrawString("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π:", font, XBrushes.Black, 40, y);
                            y += 20;
                            
                            foreach (var entry in conversionHistory.Take(20))
                            {
                                if (y > page.Height - 40) break;
                                gfx.DrawString($"{entry.DateTime:HH:mm:ss} - {entry.Operation} = {entry.Result}", 
                                    font, XBrushes.Black, 60, y);
                                y += 20;
                            }
                            
                            document.Save(saveDialog.FileName);
                            lblStatus.Text = "PDF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω";
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: {ex.Message}", 
                            "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void SaveAsText(string filename)
        {
            try
            {
                var sb = new StringBuilder();
                sb.AppendLine("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –û—Ç—á–µ—Ç");
                sb.AppendLine($"–î–∞—Ç–∞: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                sb.AppendLine();
                
                if (!string.IsNullOrEmpty(txtInput.Text) && !string.IsNullOrEmpty(txtOutput.Text))
                {
                    sb.AppendLine("–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:");
                    sb.AppendLine($"  –¢–∏–ø: {cboType.SelectedItem}");
                    sb.AppendLine($"  {txtInput.Text} {cboFromUnit.SelectedItem} = " +
                        $"{txtOutput.Text} {cboToUnit.SelectedItem}");
                    sb.AppendLine();
                }
                
                sb.AppendLine("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π:");
                foreach (var entry in conversionHistory.Take(50))
                {
                    sb.AppendLine($"  {entry.DateTime:yyyy-MM-dd HH:mm:ss} - " +
                        $"{entry.Operation} = {entry.Result}");
                }
                
                File.WriteAllText(filename, sb.ToString());
                lblStatus.Text = "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ImportJSONData(string json)
        {
            try
            {
                var entries = Newtonsoft.Json.JsonConvert.DeserializeObject<List<HistoryEntry>>(json);
                if (entries != null)
                {
                    foreach (var entry in entries)
                    {
                        conversionHistory.Add(entry);
                    }
                    UpdateHistoryGrid();
                }
            }
            catch
            {
                MessageBox.Show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ JSON –¥–∞–Ω–Ω—ã—Ö", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ImportCSVData(string csv)
        {
            try
            {
                var lines = csv.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                if (lines.Length > 1)
                {
                    for (int i = 1; i < lines.Length; i++)
                    {
                        var parts = lines[i].Split(',');
                        if (parts.Length >= 4)
                        {
                            var entry = new HistoryEntry
                            {
                                DateTime = DateTime.Parse(parts[0]),
                                Type = parts[1].Trim('"'),
                                Operation = parts[2].Trim('"'),
                                Result = parts[3].Trim('"')
                            };
                            conversionHistory.Add(entry);
                        }
                    }
                    UpdateHistoryGrid();
                }
            }
            catch
            {
                MessageBox.Show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ CSV –¥–∞–Ω–Ω—ã—Ö", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
